<?xml version="1.0" encoding="UTF-8" ?>
<dds xmlns="http://www.omg.org/dds/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="file://DDS_QoSProfile.xsd">
<qos_library name="myqoslib">
    <qos_profile name="my_profile">
        <datareader_qos>

            <!-- 用于控制DataReader接收数据的时间间隔 -->
            <!-- <time_based_filter>
                <minimum_separation>
                    <sec>1</sec>
                    <nanosec>0</nanosec> 
                </minimum_separation>
            </time_based_filter>  -->

            <!-- 控制订阅者在接收多个发布者发送数据时的顺序，Reader和Writer需要匹配 -->
            <destination_order>
                <!-- <kind>BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS</kind> -->
                <kind>BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS</kind>                
            </destination_order>

            <history>
                <!-- <kind>KEEP_LAST_HISTORY_QOS</kind>
                <depth>1</depth> -->
                <kind>KEEP_ALL_HISTORY_QOS</kind>
            </history>

            <!-- DataReader 相关的数据生命周期管理 -->
            <reader_data_lifecycle>
                <!-- 显式释放后的数据保留时间 -->
                <autopurge_disposed_samples_delay>
                    <sec>2</sec>
                    <nanosec>0</nanosec>
                </autopurge_disposed_samples_delay>
                <!-- 不活跃样本清除时间 -->
                <autopurge_nowriter_samples_delay>
                    <sec>2</sec>
                    <nanosec>0</nanosec>
                </autopurge_nowriter_samples_delay>
            </reader_data_lifecycle>
            
        </datareader_qos>

        <subscriber_qos>
            <!-- 定义数据的呈现方式，特别是它如何被组织和传递给订阅者（Subscriber） -->
            <presentation>
                <access_scope>TOPIC_PRESENTATION_QOS</access_scope>
                <coherent_access>1</coherent_access>
                <ordered_access>1</ordered_access>
            </presentation>   

            <!-- 用于标识一组具有相同 GroupData 值的 DataWriter 和 DataReader -->
            <!-- <group_data>
                <value>0xGG</value>
            </group_data> -->

            <!-- 将 DDS 主题划分为多个逻辑分区 -->
            <partition>
                <name>
                <!-- <element>QoStest_example</element> -->
                <element>TEST</element>
                </name>
            </partition>

        </subscriber_qos>

        <datawriter_qos>
            <!-- 控制订阅者在接收多个发布者发送数据时的顺序，Reader和Writer需要匹配 -->
            <destination_order>
                <!-- <kind>BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS</kind> -->
                <kind>BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS</kind>                
            </destination_order>

            <history>
                <!-- <kind>KEEP_LAST_HISTORY_QOS</kind>
                <depth>1</depth> -->
                <kind>KEEP_ALL_HISTORY_QOS</kind>
            </history>

            <!-- 在 EXCLUSIVE 所有权模式下控制 DataWriter 之间的相对优先级 数字越高越高-->
            <!-- <ownership_strength>
                <value>5</value>
            </ownership_strength> -->

            <!-- 自动释放未注册实例 默认开启-->
            <!-- <writer_data_lifecycle>
                <autodispose_unregistered_instances>true</autodispose_unregistered_instances>
            </writer_data_lifecycle> -->

        </datawriter_qos>
        <publisher_qos>
            <!-- 定义数据的呈现方式，特别是它如何被组织和传递给订阅者（Subscriber） -->  
            <presentation>
                <access_scope>TOPIC_PRESENTATION_QOS</access_scope>
                <coherent_access>1</coherent_access>
                <ordered_access>1</ordered_access>
            </presentation>

        <!-- 用于标识一组具有相同 GroupData 值的 DataWriter 和 DataReader -->
            <!-- <group_data>
                <value>0xGG</value>
            </group_data> -->

            <!-- 将 DDS 主题划分为多个逻辑分区 -->
            <partition>
                <name>
                <!-- <element>QoStest_example</element> -->
                <element>TEST</element>
                </name>
            </partition>

        </publisher_qos>
        <topic_qos name="my_topic">

        <!-- 用于附加用户特定的数据到 DDS 主题（Topic）一般不会用到-->
            <!-- <topic_data>
                <value>0x00</value>
            </topic_data> -->

            <!-- 用于控制数据的历史记录 -->
            <history>
                <!-- <kind>KEEP_ALL_HISTORY_QOS</kind> -->
            <kind>KEEP_LAST_HISTORY_QOS</kind>
                <depth>1</depth>
            </history>
            <!-- 如果不使用Keep_ALL_QOS时，保留的历史数据的最大数量-->
            <resource_limits>
                <max_samples>10000</max_samples>
                <max_instances>-1</max_instances>
                <max_samples_per_instance>-1</max_samples_per_instance>
            </resource_limits>

            <!-- 定义了数据传输的可靠性要求，确保数据到达目标节点 -->
            <reliability>
                <!-- <kind>BEST_EFFORT_RELIABILITY_QOS</kind> -->
                <kind>RELIABLE_RELIABILITY_QOS</kind>
                <max_blocking_time>
                    <sec>10</sec>
                    <nanosec>0</nanosec>
                </max_blocking_time>
            </reliability>

            <!-- 用于定义数据读取操作的期望时间限制 -->
            <!--<deadline>
                <period>
                    <sec>0</sec>
                    <nanosec>1</nanosec>
                </period>
            </deadline> -->
            
            <!-- 用于定义数据传输过程中可以接受的最大延迟时间 -->
            <latency_budget>
                <duration>
                    <sec>1</sec>
                    <nanosec>0</nanosec>
                </duration>
            </latency_budget>

            <!-- 用于确保数据写入者（DataWriter）向系统表明其活跃状态 -->
            <liveliness>
                <kind>AUTOMATIC_LIVELINESS_QOS</kind>
                <!-- <kind>MANUAL_BY_PARTICIPANT_LIVELINESS_QOS</kind> -->
                <!-- <kind>MANUAL_BY_TOPIC_LIVELINESS_QOS</kind> -->
                <lease_duration>
                    <sec>1</sec>
                    <nanosec>0</nanosec>                
                </lease_duration>
            </liveliness>

            <!-- 用于定义数据的持久性存储类型 -->
            <durability>
                <!-- <kind>VOLATILE_DURABILITY_QOS</kind> -->
                <!-- <kind>TRANSIENT_LOCAL_DURABILITY_QOS</kind> -->
                <kind>TRANSIENT_DURABILITY_QOS</kind>
            </durability>

            <!-- 用于设置传输优先级 -->
            <transport_priority>
                <value>0</value>
            </transport_priority>

            <!-- 用于定义数据的生命周期，即数据在被消费之前在系统中保持有效性的最大时间 -->
            <lifespan>
                <duration>
                    <sec>5</sec>
                    <nanosec>0</nanosec>   
                </duration>
            </lifespan>

            <!-- 用于定义同一主题下多个 DataWriter 发送数据时的所有权策略: SHARED 共享、EXCLUSIVE 只接收优先级最高的数据 -->
            <ownership>
                <!-- <kind>SHARED_OWNERSHIP_QOS</kind> -->
                <kind>EXCLUSIVE_OWNERSHIP_QOS</kind>
            </ownership>
        </topic_qos>

        <!-- 用于附加用户特定的数据到 DDS 参与者（Participant）一般不会用到-->
        <domain_participant_qos>
            <user_data>
                <value>0x00</value>
            </user_data>
        </domain_participant_qos>

    </qos_profile>

    <qos_profile name="sub_profile">
        <datawriter_qos>
        <history>
            <kind>KEEP_ALL_HISTORY_QOS</kind>
        </history>
        </datawriter_qos>
    </qos_profile>
</qos_library>
</dds>